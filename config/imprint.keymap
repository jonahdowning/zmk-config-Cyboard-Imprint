#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mt {
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <125>;
    flavor = "balanced";
};

/ {
    chosen { zmk,matrix-transform = &imprint_function_row; };

    keymap {
        compatible = "zmk,keymap";

        MAC_BASE {
            bindings = <
&none    &none             &none               &none           &none               &none                                        &none                            &none                &none                &none                  &none                 &none
&none    &none             &none               &none           &none               &none                                        &none                            &none                &none                &none                  &none                 &none
&kp ESC  &kp Q             &kp W               &kp E           &kp R               &kp T                                        &kp Y                            &kp U                &kp I                &kp O                  &kp P                 &kp MINUS
&none    &kp A             &kp S               &kp D           &kp F               &kp G                                        &kp H                            &kp J                &kp K                &kp L                  &kp SEMI              &kp SQT
&none    &mt Z LEFT_SHIFT  &mt X LEFT_CONTROL  &mt C LEFT_ALT  &mt V LEFT_COMMAND  &mt B LA(LS(LC(LG(LEFT_COMMAND))))           &mt N RA(RS(RC(RG(RIGHT_GUI))))  &mt M RIGHT_COMMAND  &mt COMMA RIGHT_ALT  &mt DOT RIGHT_CONTROL  &mt FSLH RIGHT_SHIFT  &none
                           &none               &none                                                                                                                                  &none                &none
                                                               &lt 2 ESCAPE        &none                               &none    &none                            &none                &lt 3 DEL
                                                               &lt 5 TAB           &lt 1 E                             &none    &none                            &kp SPACE            &lt 4 BACKSPACE
            >;
        };

        mShort+Nav {
            bindings = <
&none                         &none                      &none                 &none                  &none      &none               &none         &none      &none      &none          &none    &none
&none                         &none                      &none                 &none                  &none      &none               &none         &none      &none      &none          &none    &none
&kp LS(LC(LG(LA(B))))         &kp LS(LA(LC(LG(GRAVE))))  &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)  &kp LG(R)  &kp LG(X)           &kp LS(TAB)   &kp PG_DN  &kp PG_UP  &kp TAB        &kp ESC  &none
&kp LS(LA(LC(LG(NUMBER_4))))  &kp LS(LA(LC(LG(N2))))     &kp LS(LG(Z))         &kp LG(Z)              &kp LG(C)  &kp LG(V)           &kp LEFT      &kp DOWN   &kp UP     &kp RIGHT      &kp RET  &none
&kp LA(LS(LEFT_COMMAND))      &kp LSHFT                  &kp LCTRL             &kp LALT               &kp LGUI   &kp ESC             &kp LG(LEFT)  &none      &none      &kp LG(RIGHT)  &none    &none
                                                         &none                 &none                                                                          &none      &none
                                                                                                      &none      &none      &none    &none         &none      &none
                                                                                                      &none      &none      &none    &none         &none      &none
            >;
        };

        mWindow {
            bindings = <
&none  &none  &none  &none  &none  &none           &none                  &none                       &none                     &none          &none     &none
&none  &none  &none  &none  &none  &none           &none                  &none                       &none                     &none          &none     &none
&none  &none  &none  &none  &none  &none           &kp LA(LS(LC(SPACE)))  &kp N1                      &kp N2                    &kp N3         &kp N4    &kp LC(LA(LS(P)))
&none  &none  &none  &none  &none  &none           &kp H                  &kp J                       &kp K                     &kp L          &kp SEMI  &kp SQT
&none  &none  &none  &none  &none  &none           &kp LS(LC(LA(F)))      &kp LS(LA(LC(DOT)))         &kp LS(LA(LC(EQUAL)))     &kp LG(LC(F))  &none     &kp LS(LC(LA(R)))
              &none  &none                                                                            &none                     &none
                            &none  &none  &none    &none                  &none                       &none
                            &none  &none  &none    &none                  &kp LS(LA(LC(LEFT_SHIFT)))  &kp LA(LC(LEFT_COMMAND))
            >;
        };

        mVS+FN {
            bindings = <
&none  &none      &none      &none     &none     &none           &none  &none   &none   &none   &none    &none
&none  &none      &none      &none     &none     &none           &none  &none   &none   &none   &none    &none
&none  &none      &none      &none     &none     &none           &none  &kp F7  &kp F8  &kp F9  &kp F10  &none
&none  &none      &none      &none     &none     &none           &none  &kp F4  &kp F5  &kp F6  &kp F11  &none
&none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none           &none  &kp F1  &kp F2  &kp F3  &kp F12  &none
                  &none      &none                                              &none   &none
                                       &none     &none  &none    &none  &none   &none
                                       &none     &none  &none    &none  &none   &none
            >;
        };

        mSym+Delim {
            bindings = <
&none  &none      &none      &none     &none     &none           &none             &none                  &none            &none              &none          &none
&none  &none      &none      &none     &none     &none           &none             &none                  &none            &none              &none          &none
&none  &none      &none      &none     &none     &none           &kp HASH          &kp PERCENT            &kp EXCLAMATION  &kp TILDE          &kp PIPE       &kp GRAVE
&none  &none      &none      &none     &none     &none           &kp LESS_THAN     &kp LEFT_PARENTHESIS   &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp AMPERSAND  &kp DOLLAR
&none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none           &kp GREATER_THAN  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp AT_SIGN    &kp NON_US_BACKSLASH
                  &none      &none                                                                        &none            &none
                                       &none     &none  &none    &none             &none                  &none
                                       &none     &none  &none    &none             &none                  &none
            >;
        };

        mMedia+Num {
            bindings = <
&none                         &none      &none       &none              &none            &none                                      &none     &none   &none      &none   &none      &none
&none                         &none      &none       &none              &none            &none                                      &none     &none   &none      &none   &none      &none
&none                         &none      &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none                                      &kp STAR  &kp N7  &kp N8     &kp N9  &kp FSLH   &none
&none                         &none      &kp C_PREV  &kp C_PP           &kp C_NEXT       &none                                      &kp DOT   &kp N4  &kp N5     &kp N6  &kp EQUAL  &none
&kp LA(LS(LG(LEFT_COMMAND)))  &kp LSHFT  &kp LCTRL   &kp LALT           &kp LGUI         &kp LG(LC(LA(LS(LEFT_COMMAND))))           &kp PLUS  &kp N1  &kp N2     &kp N3  &kp MINUS  &none
                                         &none       &none                                                                                            &none      &none
                                                                        &none            &none                             &none    &none     &none   &kp BSPC
                                                                        &none            &none                             &none    &none     &kp N0  &kp SPACE
            >;
        };

        Auto_Mouse_Layer {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
                &trans     &trans                                                  &trans  &trans
                                      &trans     &trans  &trans    &trans  &trans  &trans
                                      &trans     &trans  &trans    &trans  &trans  &trans
            >;
        };

        Keyboard_Control_Layer {
            bindings = <
&trans       &trans        &trans        &trans        &trans        &trans                    &trans          &trans           &trans           &trans           &trans           &trans
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4              &trans          &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans           &trans           &trans
&sys_reset   &trans        &trans        &trans        &trans        &studio_unlock            &studio_unlock  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &sys_reset
&bootloader  &trans        &trans        &trans        &trans        &trans                    &trans          &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &bootloader
&to 7        &trans        &trans        &trans        &trans        &trans                    &trans          &trans           &trans           &trans           &trans           &to 7
                           &trans        &trans                                                                                 &trans           &trans
                                                       &trans        &trans          &trans    &trans          &trans           &trans
                                                       &trans        &trans          &trans    &trans          &trans           &trans
            >;
        };

        factory_test {
            bindings = <
&kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5            &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1
&kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7            &kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3
&kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9            &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5
&kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1            &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7
&kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3            &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9
                &kp N2  &kp N3                                            &kp N7  &kp N8
                                &kp N1  &kp N2  &kp N3    &kp N4  &kp N5  &kp N6
                                &kp N7  &kp N8  &kp N9    &kp N0  &kp N1  &kp N2
            >;
        };
    };
};

// right hand trackball configuration
// &trackball_peripheral_listener {
//    input-processors =
//     activate layer 3 within 500ms of the trackball moving
//     <&zip_temp_layer 3 500>;
// };
//left hand trackball configuration

&trackball_central_listener {
    input-processors =
        // multiply sensitivity by 1, divide by 3 (make it slower for scrolling),,,
        <&zip_xy_scaler 1 3>,
        // make this trackball output scrolling events by default instead of cursor movement,,,
        <&zip_xy_to_scroll_mapper>,
        // invert vertical scrolling so that the view moves in the same direction as the top of the trackball.,,,
        <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;
};
